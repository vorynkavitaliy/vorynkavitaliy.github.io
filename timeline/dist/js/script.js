/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.addEventListener("DOMContentLoaded", function () {
  "use strict"; // navbar toggle script

  var navBtn = document.querySelector(".nav__icon");
  navBtn.addEventListener("click", function () {
    var navbar = navBtn.nextElementSibling;
    navBtn.classList.toggle("open");
    navbar.classList.toggle("open");
  }); //data base of years for timeline

  var yearsDB = {
    years: ["today", 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012]
  };
  var dataCircle = document.querySelector(".data__circle"); //create years list in html

  var createYearsList = function createYearsList(years, parent) {
    parent.innerHTML = "";
    years.forEach(function (year) {
      parent.innerHTML += "\n            <span>".concat(year, "\n            </span>\n            ");
    });
  };

  createYearsList(yearsDB.years, dataCircle); // create timeline wheel

  var timeYears = dataCircle.querySelectorAll("span"),
      dataWheel = document.querySelector(".data__wheel"),
      dataDescription = document.querySelector(".data__description"),
      generalYear = dataDescription.querySelector(".year");
  timeYears[Math.floor(timeYears.length / 2)].classList.add("active");
  var textYear = timeYears[Math.floor(timeYears.length / 2)].textContent;
  generalYear.textContent = textYear;
  var n = 0;
  var y = Math.floor(timeYears.length / 2);

  var resizeText = function resizeText(size) {
    if (textYear.length > 17) {
      generalYear.setAttribute("style", "font-size: ".concat(size, "px; letter-spacing: 18px"));
    } else if (textYear.length <= 17) {
      generalYear.removeAttribute("style");
    }
  };

  var rotateWheel = function rotateWheel(degNum, timeItem) {
    dataCircle.setAttribute("style", "transform: translateY(-30px) rotate(".concat(degNum * 15, "deg)"));

    for (var i = 0; i < timeYears.length; i++) {
      timeYears[i].classList.remove("active");
    }

    timeYears[timeItem].classList.add("active");
    textYear = timeYears[timeItem].textContent;

    if (document.documentElement.clientWidth >= 768 && document.documentElement.clientWidth <= 1344) {
      resizeText(90);
    }

    generalYear.textContent = textYear;
  };

  var event = null;

  if (document.documentElement.clientWidth < 768) {
    dataWheel.addEventListener("touchstart", function (e) {
      event = e;
    });
    dataWheel.addEventListener("touchmove", function (e) {
      var coordOld = Math.floor(-90 + (e.touches[0].pageX / 10 - event.touches[0].pageX / 10)),
          coordNew = Math.floor(coordOld + (e.touches[0].pageX / 10 - event.touches[0].pageX / 10));

      if (event) {
        var rotateBox = function rotateBox(deg, i) {
          dataCircle.setAttribute("style", "transform: rotate(".concat(deg, "deg)"));

          for (var _y = 0; _y < timeYears.length; _y++) {
            timeYears[_y].classList.remove("active");
          }

          timeYears[i].classList.add("active");
          textYear = timeYears[i].textContent;
          generalYear.textContent = textYear;
        };

        if (coordNew <= -30 && coordNew >= -37) {
          coordNew = -30;
          rotateBox(coordNew, 0);
        } else if (coordNew <= -38 && coordNew >= -52) {
          coordNew = -45;
          rotateBox(coordNew, 1);
        } else if (coordNew <= -53 && coordNew >= -67) {
          coordNew = -60;
          rotateBox(coordNew, 2);
        } else if (coordNew <= -68 && coordNew >= -82) {
          coordNew = -75;
          rotateBox(coordNew, 3);
        } else if (coordNew <= -83 && coordNew >= -97) {
          coordNew = -90;
          rotateBox(coordNew, 4);
        } else if (coordNew <= -98 && coordNew >= -112) {
          coordNew = -105;
          rotateBox(coordNew, 5);
        } else if (coordNew <= -113 && coordNew >= -127) {
          coordNew = -120;
          rotateBox(coordNew, 6);
        } else if (coordNew <= -128 && coordNew >= -142) {
          coordNew = -135;
          rotateBox(coordNew, 7);
        } else if (coordNew <= -143 && coordNew >= -150) {
          coordNew = -150;
          rotateBox(coordNew, 8);
        }
      }
    });
    dataWheel.addEventListener("touched", function (e) {
      event = null;
    });
  }

  if (document.documentElement.clientWidth >= 768) {
    timeYears.forEach(function (span, i) {
      span.addEventListener("click", function () {
        rotateWheel(-i + 4, i);
      });
    });
  }

  if (document.documentElement.clientWidth >= 1345) {
    dataWheel.addEventListener("mouseenter", function () {
      document.body.setAttribute("style", "overflow: hidden; padding-right: 18px");
    });
    dataWheel.addEventListener("mouseleave", function () {
      document.body.removeAttribute("style");
    });
    dataWheel.addEventListener("wheel", function (e) {
      if (e.deltaY < 0) {
        n <= -4 ? n = -4 : n--;
        y >= timeYears.length - 1 ? y = timeYears.length - 1 : y++;
      } else if (e.deltaY > 0) {
        n >= 4 ? n = 4 : n++;
        y <= 0 ? y = 0 : y--;
      }

      rotateWheel(n, y);
    });
  }
});

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,